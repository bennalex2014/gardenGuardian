//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.1
//     from Assets/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/PlayerInput.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""standard player"",
            ""id"": ""f1a6c182-b0ac-4825-b500-58545c9476a3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""04bb15e8-2eb5-4a01-8f6e-da575250e1c9"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""356cb391-4911-434c-949e-c8dfe66ba608"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""624d0620-7c19-40b4-8ca6-f71ac804ade9"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";wasd player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""df98acde-c7a3-4fb7-9d9d-96f0be30c993"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";wasd player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""eec3f768-d633-4dbc-be48-936d837634fd"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";wasd player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e730409a-2a5c-4bc0-b5ed-24c964875e7a"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";wasd player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""04af2bb7-a9c8-4d45-b5c4-15d8b4e6dce4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b7a0ec6d-31e9-4ee1-901b-3bfcbc321842"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";wasd player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b03a0a11-ae8e-434d-ada6-2310e5aca244"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";wasd player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""16d36193-7957-4bca-bc9a-1ab605faee04"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";wasd player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""152a8089-30e7-4d6c-bfc9-535504797493"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";wasd player"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""TurretPlacement"",
            ""id"": ""c090e50a-2889-45e2-a830-671f2af85031"",
            ""actions"": [
                {
                    ""name"": ""SelectTurret1"",
                    ""type"": ""Button"",
                    ""id"": ""c6a4719b-3c49-4387-ac27-4d5b074c4534"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectTurret2"",
                    ""type"": ""Button"",
                    ""id"": ""afc52e18-c634-4af0-9e16-dcff1f4589ef"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectTurret3"",
                    ""type"": ""Button"",
                    ""id"": ""06985821-928a-4f81-983e-fe318d952287"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveCursor"",
                    ""type"": ""Value"",
                    ""id"": ""0a60cd4f-4f60-4056-bee5-75568d3f2a15"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""f5a796e6-47a1-431f-806e-3b43c04e6081"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""e1f0d6a9-3ff9-4c7b-b80a-0f74ad94f374"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2b216979-ae41-4558-8291-2bdac622d9c3"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectTurret1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b0167bb-1531-4e41-a0b0-9ed8f3efdb91"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectTurret2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e28b81a-2190-4386-9a04-bcb4b74cd345"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectTurret3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c086624e-39a5-4ae5-8467-ff0dc05cd0ab"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""2bc7e0b0-2aca-4c3f-b12c-597463c36067"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";wasd player"",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f06c7dc0-25a9-4e35-bb00-02fae6db7ca9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";wasd player"",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""59632e68-61c7-4a14-bb94-f256702b1c81"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";wasd player"",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c854cd8b-93a2-4754-9127-806fba6ca8fa"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";wasd player"",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""73d5ec5e-65cc-4a7c-a331-d27b60f9d2a7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a83b8897-4f07-4bcc-80cc-1e3ef1d60cc1"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""wasd player"",
            ""bindingGroup"": ""wasd player"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // standard player
        m_standardplayer = asset.FindActionMap("standard player", throwIfNotFound: true);
        m_standardplayer_Move = m_standardplayer.FindAction("Move", throwIfNotFound: true);
        // TurretPlacement
        m_TurretPlacement = asset.FindActionMap("TurretPlacement", throwIfNotFound: true);
        m_TurretPlacement_SelectTurret1 = m_TurretPlacement.FindAction("SelectTurret1", throwIfNotFound: true);
        m_TurretPlacement_SelectTurret2 = m_TurretPlacement.FindAction("SelectTurret2", throwIfNotFound: true);
        m_TurretPlacement_SelectTurret3 = m_TurretPlacement.FindAction("SelectTurret3", throwIfNotFound: true);
        m_TurretPlacement_MoveCursor = m_TurretPlacement.FindAction("MoveCursor", throwIfNotFound: true);
        m_TurretPlacement_Confirm = m_TurretPlacement.FindAction("Confirm", throwIfNotFound: true);
        m_TurretPlacement_Cancel = m_TurretPlacement.FindAction("Cancel", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_standardplayer.enabled, "This will cause a leak and performance issues, PlayerInput.standardplayer.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_TurretPlacement.enabled, "This will cause a leak and performance issues, PlayerInput.TurretPlacement.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // standard player
    private readonly InputActionMap m_standardplayer;
    private List<IStandardplayerActions> m_StandardplayerActionsCallbackInterfaces = new List<IStandardplayerActions>();
    private readonly InputAction m_standardplayer_Move;
    /// <summary>
    /// Provides access to input actions defined in input action map "standard player".
    /// </summary>
    public struct StandardplayerActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public StandardplayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "standardplayer/Move".
        /// </summary>
        public InputAction @Move => m_Wrapper.m_standardplayer_Move;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_standardplayer; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="StandardplayerActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(StandardplayerActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="StandardplayerActions" />
        public void AddCallbacks(IStandardplayerActions instance)
        {
            if (instance == null || m_Wrapper.m_StandardplayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StandardplayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="StandardplayerActions" />
        private void UnregisterCallbacks(IStandardplayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="StandardplayerActions.UnregisterCallbacks(IStandardplayerActions)" />.
        /// </summary>
        /// <seealso cref="StandardplayerActions.UnregisterCallbacks(IStandardplayerActions)" />
        public void RemoveCallbacks(IStandardplayerActions instance)
        {
            if (m_Wrapper.m_StandardplayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="StandardplayerActions.AddCallbacks(IStandardplayerActions)" />
        /// <seealso cref="StandardplayerActions.RemoveCallbacks(IStandardplayerActions)" />
        /// <seealso cref="StandardplayerActions.UnregisterCallbacks(IStandardplayerActions)" />
        public void SetCallbacks(IStandardplayerActions instance)
        {
            foreach (var item in m_Wrapper.m_StandardplayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StandardplayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="StandardplayerActions" /> instance referencing this action map.
    /// </summary>
    public StandardplayerActions @standardplayer => new StandardplayerActions(this);

    // TurretPlacement
    private readonly InputActionMap m_TurretPlacement;
    private List<ITurretPlacementActions> m_TurretPlacementActionsCallbackInterfaces = new List<ITurretPlacementActions>();
    private readonly InputAction m_TurretPlacement_SelectTurret1;
    private readonly InputAction m_TurretPlacement_SelectTurret2;
    private readonly InputAction m_TurretPlacement_SelectTurret3;
    private readonly InputAction m_TurretPlacement_MoveCursor;
    private readonly InputAction m_TurretPlacement_Confirm;
    private readonly InputAction m_TurretPlacement_Cancel;
    /// <summary>
    /// Provides access to input actions defined in input action map "TurretPlacement".
    /// </summary>
    public struct TurretPlacementActions
    {
        private @PlayerInput m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public TurretPlacementActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "TurretPlacement/SelectTurret1".
        /// </summary>
        public InputAction @SelectTurret1 => m_Wrapper.m_TurretPlacement_SelectTurret1;
        /// <summary>
        /// Provides access to the underlying input action "TurretPlacement/SelectTurret2".
        /// </summary>
        public InputAction @SelectTurret2 => m_Wrapper.m_TurretPlacement_SelectTurret2;
        /// <summary>
        /// Provides access to the underlying input action "TurretPlacement/SelectTurret3".
        /// </summary>
        public InputAction @SelectTurret3 => m_Wrapper.m_TurretPlacement_SelectTurret3;
        /// <summary>
        /// Provides access to the underlying input action "TurretPlacement/MoveCursor".
        /// </summary>
        public InputAction @MoveCursor => m_Wrapper.m_TurretPlacement_MoveCursor;
        /// <summary>
        /// Provides access to the underlying input action "TurretPlacement/Confirm".
        /// </summary>
        public InputAction @Confirm => m_Wrapper.m_TurretPlacement_Confirm;
        /// <summary>
        /// Provides access to the underlying input action "TurretPlacement/Cancel".
        /// </summary>
        public InputAction @Cancel => m_Wrapper.m_TurretPlacement_Cancel;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_TurretPlacement; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="TurretPlacementActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(TurretPlacementActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="TurretPlacementActions" />
        public void AddCallbacks(ITurretPlacementActions instance)
        {
            if (instance == null || m_Wrapper.m_TurretPlacementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TurretPlacementActionsCallbackInterfaces.Add(instance);
            @SelectTurret1.started += instance.OnSelectTurret1;
            @SelectTurret1.performed += instance.OnSelectTurret1;
            @SelectTurret1.canceled += instance.OnSelectTurret1;
            @SelectTurret2.started += instance.OnSelectTurret2;
            @SelectTurret2.performed += instance.OnSelectTurret2;
            @SelectTurret2.canceled += instance.OnSelectTurret2;
            @SelectTurret3.started += instance.OnSelectTurret3;
            @SelectTurret3.performed += instance.OnSelectTurret3;
            @SelectTurret3.canceled += instance.OnSelectTurret3;
            @MoveCursor.started += instance.OnMoveCursor;
            @MoveCursor.performed += instance.OnMoveCursor;
            @MoveCursor.canceled += instance.OnMoveCursor;
            @Confirm.started += instance.OnConfirm;
            @Confirm.performed += instance.OnConfirm;
            @Confirm.canceled += instance.OnConfirm;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="TurretPlacementActions" />
        private void UnregisterCallbacks(ITurretPlacementActions instance)
        {
            @SelectTurret1.started -= instance.OnSelectTurret1;
            @SelectTurret1.performed -= instance.OnSelectTurret1;
            @SelectTurret1.canceled -= instance.OnSelectTurret1;
            @SelectTurret2.started -= instance.OnSelectTurret2;
            @SelectTurret2.performed -= instance.OnSelectTurret2;
            @SelectTurret2.canceled -= instance.OnSelectTurret2;
            @SelectTurret3.started -= instance.OnSelectTurret3;
            @SelectTurret3.performed -= instance.OnSelectTurret3;
            @SelectTurret3.canceled -= instance.OnSelectTurret3;
            @MoveCursor.started -= instance.OnMoveCursor;
            @MoveCursor.performed -= instance.OnMoveCursor;
            @MoveCursor.canceled -= instance.OnMoveCursor;
            @Confirm.started -= instance.OnConfirm;
            @Confirm.performed -= instance.OnConfirm;
            @Confirm.canceled -= instance.OnConfirm;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="TurretPlacementActions.UnregisterCallbacks(ITurretPlacementActions)" />.
        /// </summary>
        /// <seealso cref="TurretPlacementActions.UnregisterCallbacks(ITurretPlacementActions)" />
        public void RemoveCallbacks(ITurretPlacementActions instance)
        {
            if (m_Wrapper.m_TurretPlacementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="TurretPlacementActions.AddCallbacks(ITurretPlacementActions)" />
        /// <seealso cref="TurretPlacementActions.RemoveCallbacks(ITurretPlacementActions)" />
        /// <seealso cref="TurretPlacementActions.UnregisterCallbacks(ITurretPlacementActions)" />
        public void SetCallbacks(ITurretPlacementActions instance)
        {
            foreach (var item in m_Wrapper.m_TurretPlacementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TurretPlacementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="TurretPlacementActions" /> instance referencing this action map.
    /// </summary>
    public TurretPlacementActions @TurretPlacement => new TurretPlacementActions(this);
    private int m_wasdplayerSchemeIndex = -1;
    /// <summary>
    /// Provides access to the input control scheme.
    /// </summary>
    /// <seealso cref="UnityEngine.InputSystem.InputControlScheme" />
    public InputControlScheme wasdplayerScheme
    {
        get
        {
            if (m_wasdplayerSchemeIndex == -1) m_wasdplayerSchemeIndex = asset.FindControlSchemeIndex("wasd player");
            return asset.controlSchemes[m_wasdplayerSchemeIndex];
        }
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "standard player" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="StandardplayerActions.AddCallbacks(IStandardplayerActions)" />
    /// <seealso cref="StandardplayerActions.RemoveCallbacks(IStandardplayerActions)" />
    public interface IStandardplayerActions
    {
        /// <summary>
        /// Method invoked when associated input action "Move" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMove(InputAction.CallbackContext context);
    }
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "TurretPlacement" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="TurretPlacementActions.AddCallbacks(ITurretPlacementActions)" />
    /// <seealso cref="TurretPlacementActions.RemoveCallbacks(ITurretPlacementActions)" />
    public interface ITurretPlacementActions
    {
        /// <summary>
        /// Method invoked when associated input action "SelectTurret1" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectTurret1(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectTurret2" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectTurret2(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SelectTurret3" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSelectTurret3(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MoveCursor" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMoveCursor(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Confirm" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnConfirm(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Cancel" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnCancel(InputAction.CallbackContext context);
    }
}
